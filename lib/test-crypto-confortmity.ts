// test-crypto-conformity.ts
// Test d'int√©gration pour v√©rifier la conformit√© frontend/backend

import { verifyFeedSignature, verifyFeedCertification, verifySignatureHash } from './verifyCrypto'
import { analyzeBlocksWithValidation } from './analyzeBlocks'

/**
 * Test avec un feed r√©el de wellknownmcp.org (RECOMMAND√â)
 */
export async function testWithRealFeed() {
  console.log('üåê TEST AVEC UN FEED R√âEL\n')
  
  try {
    console.log('üì° T√©l√©chargement du feed...')
    const response = await fetch('https://wellknownmcp.org/.well-known/mcp.llmfeed.json')
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    
    const realFeed = await response.json()
    
    console.log('üì• Feed t√©l√©charg√© avec succ√®s!')
    console.log('üìã Titre:', realFeed.metadata?.title || 'Unknown')
    console.log('üè∑Ô∏è Type:', realFeed.feed_type || 'Unknown')
    console.log('üîê Trust block pr√©sent:', !!realFeed.trust)
    console.log('‚úçÔ∏è Signature pr√©sente:', !!realFeed.signature)
    console.log('üèÖ Certification pr√©sente:', !!realFeed.certification)
    console.log()
    
    // Test de canonicalisation avec feed r√©el
    console.log('üîß TEST DE CANONICALISATION:')
    testCanonicalization(realFeed)
    console.log()
    
    // Test de v√©rification de signature
    console.log('üîê TEST DE V√âRIFICATION DE SIGNATURE:')
    const signatureResult = await verifyFeedSignature(realFeed)
    console.log('- Status:', signatureResult.ok ? '‚úÖ VALID' : '‚ùå INVALID')
    console.log('- Message:', signatureResult.message)
    
    if (signatureResult.ok) {
      console.log('üéâ SUCCESS! Le frontend est conforme au backend!')
    } else {
      console.log('‚ùå FAILURE! Probl√®me de conformit√© d√©tect√©.')
      console.log('üí° Possible causes:')
      console.log('  - Canonicalisation diff√©rente entre frontend/backend')
      console.log('  - Cl√© publique inaccessible ou chang√©e')
      console.log('  - Algorithme de signature diff√©rent')
    }
    console.log()
    
    // Test de certification si pr√©sente
    if (realFeed.certification) {
      console.log('üèÖ TEST DE CERTIFICATION:')
      const certifications = Array.isArray(realFeed.certification) 
        ? realFeed.certification 
        : [realFeed.certification]
      
      for (let i = 0; i < certifications.length; i++) {
        const cert = certifications[i]
        console.log(`üìú Certification ${i + 1}:`)
        
        try {
          const certResult = await verifyFeedCertification(realFeed, cert)
          console.log(`  - Status: ${certResult.ok ? '‚úÖ VALID' : '‚ùå INVALID'}`)
          console.log(`  - Message: ${certResult.message}`)
          
          // Test du hash de signature si pr√©sent
          if (cert.signature_value_hash) {
            const hashResult = await verifySignatureHash(realFeed, cert)
            console.log(`  - Signature Hash: ${hashResult.ok ? '‚úÖ VALID' : '‚ùå INVALID'}`)
            console.log(`  - Hash Message: ${hashResult.message}`)
          }
        } catch (error) {
          console.error(`  - ‚ùå ERREUR:`, error)
        }
      }
      console.log()
    }
    
    // Analyse compl√®te des blocs
    console.log('üìä ANALYSE DES BLOCS:')
    const blockAnalysis = analyzeBlocksWithValidation(realFeed, signatureResult)
    
    blockAnalysis.forEach(block => {
      const statusIcon = getBlockStatusIcon(block)
      console.log(`${statusIcon} ${block.blockName}:`)
      console.log(`   - Signed: ${block.isSigned}`)
      console.log(`   - Signature Status: ${block.signatureValidationStatus}`)
      console.log(`   - Cert Status: ${block.certificationValidationStatus}`)
      console.log(`   - Content: ${block.contentType} (${block.contentSize} bytes)`)
      
      if (block.hasValidationErrors) {
        console.log('   - ‚ö†Ô∏è HAS VALIDATION ERRORS')
      }
      console.log()
    })
    
    return { success: signatureResult.ok, feed: realFeed }
    
  } catch (error) {
    console.error('üí• Erreur lors du test avec feed r√©el:', error)
    return { success: false, error: error.message }
  }
}

/**
 * Test complet de conformit√© avec un feed custom (pour tests sp√©cifiques)
 */
export async function testFullConformity(customFeed?: any) {
  console.log('üß™ TEST DE CONFORMIT√â FRONTEND/BACKEND\n')
  
  // Utiliser un feed custom ou un exemple par d√©faut
  const testFeed = customFeed || {
    "feed_type": "export",
    "metadata": {
      "title": "Test Feed",
      "description": "Feed de test pour validation conformit√©",
      "version": "1.0.0",
      "created_at": "2025-06-20T10:00:00Z"
    },
    "trust": {
      "signed_blocks": ["feed_type", "metadata", "trust"],
      "algorithm": "ed25519",
      "canonicalization": "https://llmca.org/mcp-canonical-json/v1",
      "public_key_hint": "https://wellknownmcp.org/.well-known/public.pem",
      "scope": "partial",
      "warning": "Only 3/3 blocks are signed."
    },
    "signature": {
      "value": "SIGNATURE_BASE64_ICI_REMPLACER_PAR_VRAIE_SIGNATURE",
      "created_at": "2025-06-20T10:00:00Z"
    }
  }

  console.log('üìã Test Feed Structure:')
  console.log('- Feed Type:', testFeed.feed_type)
  console.log('- Signed Blocks:', testFeed.trust?.signed_blocks)
  console.log('- Algorithm:', testFeed.trust?.algorithm)
  console.log('- Canonicalization:', testFeed.trust?.canonicalization)
  console.log()

  // Test 1: Canonicalisation (le plus important!)
  console.log('üîß TEST 1: Test de canonicalisation')
  const canonResult = testCanonicalization(testFeed)
  console.log()

  // Test 2: V√©rification de signature
  console.log('üîê TEST 2: Verification de signature')
  try {
    const signatureResult = await verifyFeedSignature(testFeed)
    console.log('‚úÖ Signature Status:', signatureResult.ok ? 'VALID' : 'INVALID')
    console.log('üìù Message:', signatureResult.message)
    
    if (!signatureResult.ok && !testFeed.signature.value.includes('SIGNATURE_BASE64_ICI')) {
      console.log('‚ùå √âCHEC: La signature n\'est pas valide')
      console.log('üí° Cela peut indiquer un probl√®me de canonicalisation ou de cl√©')
    }
  } catch (error) {
    console.error('üí• ERREUR lors de la v√©rification:', error)
  }
  console.log()

  // Test 3: Analyse des blocs
  console.log('üìä TEST 3: Analyse des blocs')
  const blockAnalysis = analyzeBlocksWithValidation(testFeed)
  
  blockAnalysis.forEach(block => {
    console.log(`üìÑ Block: ${block.blockName}`)
    console.log(`   - Signed: ${block.isSigned}`)
    console.log(`   - Content Type: ${block.contentType}`)
    console.log(`   - Size: ${block.contentSize} bytes`)
    console.log(`   - Validation Status: ${block.signatureValidationStatus}`)
    console.log()
  })

  console.log('üéØ RECOMMANDATIONS:')
  console.log('1. Utilisez testWithRealFeed() pour un test complet avec un vrai feed')
  console.log('2. V√©rifiez que la canonicalisation produit exactement les m√™mes bytes')
  console.log('3. Confirmez que les cl√©s publiques sont accessibles')
  console.log('4. Cr√©ez un feed de test avec une vraie signature de votre backend Python')
  
  return canonResult
}

/**
 * Test sp√©cifique de la canonicalisation (CRITIQUE pour la conformit√©)
 */
function testCanonicalization(feed: any): { correct: string, wrong: string, match: boolean } {
  const signedBlocks = feed.trust?.signed_blocks || []
  
  if (signedBlocks.length === 0) {
    console.log('‚ö†Ô∏è Aucun bloc sign√© trouv√© dans le feed')
    return { correct: '', wrong: '', match: true }
  }
  
  // Reconstruction du partial comme le backend
  const partial: any = {}
  for (const key of signedBlocks) {
    if (
      feed[key] !== undefined &&
      key !== 'signature' &&
      key !== 'certification' &&
      key !== '_meta' &&
      key !== '_verification_help'
    ) {
      partial[key] = feed[key]
    }
  }

  console.log('üîß Partial Feed pour canonicalisation:')
  console.log(JSON.stringify(partial, null, 2))
  console.log()

  // Test des diff√©rentes canonicalisations
  const correctCanon = JSON.stringify(partial)
    .replace(/,\s+/g, ',')      // Enlever espaces apr√®s virgules
    .replace(/:\s+/g, ':')      // Enlever espaces apr√®s deux-points
  
  const wrongCanon = JSON.stringify(partial)  // Avec espaces par d√©faut JS
  const sortedWrong = JSON.stringify(partial, Object.keys(partial).sort()) // Mauvais ordre

  console.log('‚úÖ Canonicalisation CORRECTE (backend-compatible):')
  console.log(`"${correctCanon}"`)
  console.log(`Length: ${correctCanon.length} bytes`)
  console.log()

  console.log('‚ùå Canonicalisation INCORRECTE (d√©faut JS):')
  console.log(`"${wrongCanon}"`)
  console.log(`Length: ${wrongCanon.length} bytes`)
  console.log(`Diff√©rente: ${correctCanon !== wrongCanon ? '‚úÖ OUI' : '‚ùå NON (probl√®me!)'}`)
  console.log()

  if (correctCanon === wrongCanon) {
    console.log('‚ö†Ô∏è ATTENTION: Les canonicalisations sont identiques!')
    console.log('Cela peut indiquer que votre JSON n\'a pas d\'espaces par d√©faut.')
    console.log('Testez avec un feed plus complexe pour voir la diff√©rence.')
  }

  // Test avec ordre des cl√©s
  console.log('üîç Test ordre des cl√©s:')
  console.log('Original order:', Object.keys(partial))
  console.log('Sorted order:', Object.keys(partial).sort())
  console.log('Order matters:', JSON.stringify(Object.keys(partial)) !== JSON.stringify(Object.keys(partial).sort()))
  console.log()

  // Test des bytes
  const correctBytes = new TextEncoder().encode(correctCanon)
  const wrongBytes = new TextEncoder().encode(wrongCanon)
  
  console.log('üì¶ Bytes Comparison:')
  console.log(`Correct bytes length: ${correctBytes.length}`)
  console.log(`Wrong bytes length: ${wrongBytes.length}`)
  console.log(`Bytes are different: ${correctBytes.length !== wrongBytes.length || correctCanon !== wrongCanon}`)

  return { 
    correct: correctCanon, 
    wrong: wrongCanon, 
    match: correctCanon === wrongCanon 
  }
}

/**
 * Ic√¥nes pour les statuts des blocs
 */
function getBlockStatusIcon(block: any): string {
  if (block.hasValidationErrors) return '‚ùå'
  if (block.signatureValidationStatus === 'valid' && block.certificationValidationStatus === 'valid') return 'üü¢'
  if (block.signatureValidationStatus === 'valid') return 'üü°'
  if (block.signatureValidationStatus === 'not_signed') return '‚ö™'
  return 'üî¥'
}

/**
 * Test express pour d√©veloppement rapide
 */
export async function quickTest() {
  console.log('‚ö° QUICK TEST - V√©rification conformit√© rapide\n')
  
  try {
    const result = await testWithRealFeed()
    
    if (result.success) {
      console.log('üéâ R√âSULTAT: Frontend conforme au backend!')
      console.log('‚úÖ Votre v√©rification cryptographique fonctionne correctement.')
    } else {
      console.log('‚ùå R√âSULTAT: Probl√®me de conformit√© d√©tect√©.')
      console.log('üîß V√©rifiez la canonicalisation et les cl√©s publiques.')
    }
    
    return result.success
    
  } catch (error) {
    console.error('üí• Quick test failed:', error)
    return false
  }
}

/**
 * Test de performance
 */
export async function performanceTest() {
  console.log('üöÄ TEST DE PERFORMANCE\n')
  
  const start = performance.now()
  
  try {
    const result = await testWithRealFeed()
    const end = performance.now()
    
    console.log(`‚è±Ô∏è Temps total: ${(end - start).toFixed(2)}ms`)
    console.log(`üìä R√©sultat: ${result.success ? 'SUCCESS' : 'FAILURE'}`)
    
    return { duration: end - start, success: result.success }
    
  } catch (error) {
    const end = performance.now()
    console.error('üí• Performance test failed:', error)
    return { duration: end - start, success: false }
  }
}

// Auto-ex√©cution pour test rapide
if (typeof window !== 'undefined') {
  (window as any).testCryptoConformity = testFullConformity;
  (window as any).testWithRealFeed = testWithRealFeed;
  (window as any).quickTest = quickTest;
  (window as any).performanceTest = performanceTest;
  
  console.log('üß™ Tests de conformit√© crypto disponibles:')
  console.log('- quickTest() - Test express avec feed r√©el')
  console.log('- testWithRealFeed() - Test complet avec feed wellknownmcp.org')
  console.log('- testCryptoConformity() - Test avec feed custom')
  console.log('- performanceTest() - Mesure de performance')
}