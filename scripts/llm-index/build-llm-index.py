#!/usr/bin/env python3
"""
Script de build rapide pour llm-index.llmfeed.json
Transforme le sitemap plat en syst√®me de navigation intelligent

Usage: python build-llm-index.py
"""

import sys
from pathlib import Path

# Ajoute le dossier courant au path pour les imports
sys.path.append(str(Path(__file__).parent))

from llm_index_generator import LLMIndexGenerator

def main():
    print("üß† Build LLM Index - Navigation Intelligente")
    print("=" * 50)
    
    try:
        generator = LLMIndexGenerator()
        
        # Arguments parsing
        import argparse
        parser = argparse.ArgumentParser(description="LLM Index Generator")
        parser.add_argument("--sitemap", help="Fichier sitemap custom")
        parser.add_argument("--output", help="Fichier de sortie custom")
        parser.add_argument("--dry-run", action="store_true", help="Simulation sans sauvegarde")
        parser.add_argument("--stats", action="store_true", help="Affiche les statistiques d√©taill√©es")
        
        args = parser.parse_args()
        
        # Override des chemins AVANT l'affichage
        if args.sitemap:
            generator.sitemap_file = Path(args.sitemap)
        if args.output:
            generator.output_file = Path(args.output)
        
        # Affichage de la configuration APR√àS l'override
        print(f"üìç Sitemap source: {generator.sitemap_file}")
        print(f"üìö Compiled site data: {generator.compiled_site_file}")
        print(f"üìÑ Sortie: {generator.output_file}")
        print(f"üîß R√®gles d'enrichissement: {len(generator.enrichments.get('url_patterns', {}))} patterns")
        print(f"üìö Cat√©gories: {len(generator.category_rules.get('categories', {}))}")
        print(f"üéØ Donn√©es r√©elles: {len(generator.compiled_site_data)} blocs disponibles")
        
        # V√©rifications pr√©liminaires
        if not generator.sitemap_file.exists():
            print(f"‚ùå Sitemap introuvable: {generator.sitemap_file}")
            print("üí° Assurez-vous que le sitemap est g√©n√©r√© en premier")
            return 1
        
        if not generator.compiled_site_file.exists():
            print(f"‚ö†Ô∏è Compiled site absent: {generator.compiled_site_file}")
            print("üí° Le g√©n√©rateur utilisera les patterns par d√©faut")
        else:
            print(f"‚úÖ Compiled site disponible - enrichissement premium activ√©!")
        
        print("\nüîÑ G√©n√©ration en cours...")
        
        # Mode dry-run
        if args.dry_run:
            # Parse juste pour obtenir les stats
            entries = generator.parse_sitemap()
            if not entries:
                print("‚ùå Aucune entr√©e trouv√©e dans le sitemap")
                return 1
            
            print("\nüí° Mode simulation - aper√ßu des r√©sultats:")
            print(f"üìä URLs trait√©es: {generator.stats['urls_processed']}")
            print(f"üìö Cat√©gories: 4 (simul√©es)")
            print(f"üß≠ Routes: estim√©es")
            
            if args.stats:
                print(f"\nüìà Stats d√©taill√©es:")
                for key, value in generator.stats.items():
                    print(f"   {key}: {value}")
            
            return 0
        
        # G√©n√©ration normale
        feed = generator.generate_llm_index()
        
        if not feed:
            print("‚ùå √âchec de g√©n√©ration")
            return 1
        
        # Sauvegarde
        output_path = generator.save_feed(feed)
        
        if output_path:
            print("\nüéâ G√©n√©ration termin√©e avec succ√®s!")
            print(f"üìä Stats finales: {generator.stats}")
            print(f"üìÑ Index cr√©√©: {output_path}")
            
            # R√©sum√© des capacit√©s
            print("\nüß† Capacit√©s de navigation intelligente activ√©es:")
            print(f"   üéØ {generator.stats['urls_processed']} URLs enrichies avec contexte R√âEL")
            print(f"   üìö {generator.stats['categories_created']} cat√©gories organis√©es")
            print(f"   üß≠ {generator.stats['routes_generated']} routes de navigation")
            print(f"   ‚ö° Smart routing pour audiences multiples")
            print(f"   üîí Indicateurs de confiance int√©gr√©s")
            print(f"   üé™ Optimisations de performance")
            print(f"   üé® {generator.stats['enrichments_applied']} enrichissements depuis compiled-site")
            
            # Qualit√© des donn√©es
            real_data_ratio = (generator.stats['enrichments_applied'] / generator.stats['urls_processed'] * 100) if generator.stats['urls_processed'] > 0 else 0
            print(f"   üìä Qualit√©: {real_data_ratio:.1f}% des URLs avec donn√©es r√©elles")
            
            # Conseils d'utilisation
            print("\nüí° Utilisation par les agents:")
            print("   ‚Ä¢ LLM: Commencer par /.well-known/mcp.llmfeed.json")
            print("   ‚Ä¢ D√©veloppeur: Aller vers /tools/ pour implementation")
            print("   ‚Ä¢ Business: Consulter /about et /ecosystem")
            print("   ‚Ä¢ S√©curit√©: V√©rifier avec /verify et trust indicators")
            
            print(f"\n‚è±Ô∏è  Temps de g√©n√©ration: {generator.stats.get('build_time', 0):.2f}s")
            
        else:
            print("‚ùå √âchec de sauvegarde")
            return 1
        
        return 0
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main())