import { NextResponse } from 'next/server'
import * as cheerio from 'cheerio'
import TurndownService from 'turndown'
import fs from 'fs'
import path from 'path'
import { cleanDataAttributes } from '@/lib/domUtils'

export const runtime = 'nodejs'

export async function POST(req: Request) {
  const { html } = await req.json()
  if (!html)
    return NextResponse.json({ error: 'Missing html content' }, { status: 400 })

  const $ = cheerio.load(html)

  $('selector').each((_, el) => {
    cleanDataAttributes(el, $)
  })

  $('script, style, meta, link, noscript').remove()
  $('*').each((_, el) => {
    $(el).removeAttr('class style id')
    cleanDataAttributes(el, $)
  })
  const cleanHtml = $('body').html() ?? html

  const turndownService = new TurndownService()
  const markdown = turndownService.turndown(cleanHtml)

  // Initial feed without data
  let feed: any = {
    feed_type: 'export',
    metadata: {
      origin: req.headers.get('host')
        ? `https://${req.headers.get('host')}`
        : '',
      source_url: req.headers.get('referer') ?? '',
      title: 'Exported Page',
      description: 'Agent export of the current page',
      tags: ['mcp', 'llmfeed', 'current'],
      content_type: 'html+markdown',
      generated_at: new Date().toISOString(),
    },
    trust: {
      trust_level: 'self-declared',
      certifier: 'https://wellknownmcp.org',
      agent_hint:
        'This feed is generated by the current page export of wellknownmcp.org',
      block_name: 'trust disclaimer',
      scope: 'partial',
      warning: 'This export has not been signed by a certified authority.',
    },
  }

  // Optional: merge template without data
  try {
    const templatePath = path.resolve('./data/export.llmfeed.template.json')
    if (fs.existsSync(templatePath)) {
      const template = JSON.parse(fs.readFileSync(templatePath, 'utf8'))
      const { data, ...restTemplate } = template
      Object.assign(feed, restTemplate)
    }
  } catch (err) {
    console.error('Signed template merge failed:', err)
  }

  // Add current export data at the end
  feed.data = {
    html: cleanHtml,
    markdown,
  }
  feed.data.context_summary = {
    origin_type: 'html page extracted at runtime',
    motivation:
      'Capture the current page content to share with an AI agent. This allows structured copy/paste with full context.',
    recommended_agent_actions: [
      'Summarize content',
      'Detect inconsistencies',
      'Suggest improvements',
      'Match this against another page',
      'Store it for future reference',
    ],
  }


  return NextResponse.json(feed)
}